apiVersion: batch/v1
kind: CronJob
metadata:
  name: backup
spec:
  schedule: "0 2 * * *"  # This will run the job daily at 2:00 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: backup-postgres
              image: bitnami/postgresql:latest
              volumeMounts:
                - name: backup-temp
                  mountPath: /tmp
              command:
                - /bin/bash
                - -c
                - |
                  echo "Fetching PostgreSQL databases"
                  # Generate timestamp to append to filenames
                  TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
                  # Backup kcdb and rmdb to temp with timestamp
                  PGPASSWORD="${KEYCLOAK_POSTGRES_PASSWORD}" pg_dump --no-owner -h postgresql.postgresql.svc.cluster.local -p 5432 -U ${KEYCLOAK_POSTGRES_USER} -d ${KEYCLOAK_POSTGRES_DATABASE} > /tmp/kcdb-${TIMESTAMP}.sql
                  # Check if pg_dump for kcdb succeeded
                  if [ $? -eq 0 ]; then
                    echo "Keycloak database fetched"
                    ls -lh /tmp/kcdb-${TIMESTAMP}.sql
                  else
                    echo "Keycloak database fetch failed!"
                    exit 1
                  fi
                  PGPASSWORD="${POSTGRES_PASSWORD}" pg_dump --no-owner -h postgresql.postgresql.svc.cluster.local -p 5432 -U ${POSTGRES_USER} -d ${POSTGRES_DB} > /tmp/rmdb-${TIMESTAMP}.sql
                  # Check if pg_dump for rmdb succeeded
                  if [ $? -eq 0 ]; then
                    echo "App database fetched"
                    ls -lh /tmp/rmdb-${TIMESTAMP}.sql
                  else
                    echo "App database fetch failed!"
                    exit 1
                  fi
            - name: backup-minio
              image: bitnami/minio-client:latest
              volumeMounts:
                - name: backup-temp
                  mountPath: /tmp
              command:
                - /bin/bash
                - -c
                - |
                  echo "Waiting for databases to be fetched"
                  # Wait until backup files are ready
                  until [ -s /tmp/kcdb-*.sql ] && [ -s /tmp/rmdb-*.sql ]; do
                    sleep 2
                  done
                  # Configure mc to access the MinIO server
                  echo "Configuring MinIO client"
                  mc alias set backup http://minio.minio.svc.cluster.local:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}
                  # Create buckets if they don't exist
                  if mc mb backup/kcdb-backup 2>/dev/null; then
                    echo "Created bucket kcdb-backup"
                  fi
                  if mc mb backup/rmdb-backup 2>/dev/null; then
                    echo "Created bucket rmdb-backup"
                  fi
                  # Upload backups to MinIO
                  echo "Uploading Keycloak database to MinIO"
                  mc cp /tmp/kcdb-*.sql backup/kcdb-backup/
                  if [ $? -eq 0 ]; then
                    echo "Keycloak database uploaded"
                    ls -lh /tmp/kcdb-*.sql
                  else
                    echo "Failed to upload Keycloak database"
                    exit 1
                  fi
                  echo "Uploading app database to MinIO"
                  mc cp /tmp/rmdb-*.sql backup/rmdb-backup/
                  if [ $? -eq 0 ]; then
                    echo "App database uploaded"
                    ls -lh /tmp/rmdb-*.sql
                  else
                    echo "Failed to upload app database"
                    exit 1
                  fi
                  echo "Backup complete"
          restartPolicy: OnFailure
          volumes:
            - name: backup-temp
              emptyDir: {}